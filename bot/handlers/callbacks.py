from telegram.ext import(
                    CallbackContext,
                    CallbackQueryHandler
                    )
                    

from telegram import Update
from ai import dish_describer
from database import db
from database.models import Dish

async def want_all_know_handler(update:Update,context:CallbackContext):
        query = update.callback_query
        dish_id = int(query.data.split('=')[-1])
        dish = Dish()
        dish.from_tuple(db.get_dish_by_id(dish_id))
        #–≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å –±—É–¥–µ—Ç –≤ –±—É–¥—É—â–µ–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –∫–µ—à—É
        processing_msg = await context.bot.send_message(
        chat_id=query.message.chat_id,
        text="–ò–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ üíæ..."
        )
        result = db.get_ans_neurlink(dish_id)
        if result == None:
                result = await dish_describer.run(dish)
                db.update_dish_by_id(dish_id,result)
                
        if result:
                await context.bot.edit_message_text(
                chat_id=query.message.chat_id,
                message_id=processing_msg.message_id,
                text=result
            )
        else: 
                await context.bot.edit_message_text(
                chat_id=query.message.chat_id,
                message_id=processing_msg.message_id,
                text="–ö –Ω–∞—à–µ–º—É —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª—é–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç—ÉüòÉ"
            )
        #–Ω—É–∂–Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü properties, 
        #–¥–ª—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –±–ª—é–¥–∞ –æ—Ç —Å–∞–º–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è

def get():
    neurlink_handler = CallbackQueryHandler(pattern=r"^dish_id",callback=want_all_know_handler)
    return [neurlink_handler]